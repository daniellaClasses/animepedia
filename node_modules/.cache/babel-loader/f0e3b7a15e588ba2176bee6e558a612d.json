{"ast":null,"code":"var _jsxFileName = \"D:\\\\Descargas_\\\\animepedia\\\\src\\\\pages\\\\AnimeDetails.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Header } from \"../components/Header\";\nimport { getRequesById } from \"../utils/apiRequest\";\nimport styles from \"./AnimeDetails.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AnimeDetails(params) {\n  _s();\n\n  let {\n    animeId\n  } = useParams();\n  const [animeInfo, setAnimeInfo] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [anime404, setAnime404] = useState(false);\n  const [animeVideos, setAnimeVideos] = useState([]);\n  useEffect(() => {\n    getRequesById(\"anime\", animeId).then(read => {\n      if (read.status === 404) {\n        setAnime404(true);\n      }\n\n      setAnimeInfo(read.data);\n    });\n    getRequesById(\"anime\", animeId + \"/videos\").then(read => {\n      if (read.status === 404) {\n        setAnime404(true);\n      }\n\n      setAnimeVideos(read.data);\n      setLoading(false);\n    });\n  }, [animeId]); // console.log(animeInfo.data.title_synonyms[0]);\n\n  if (anime404) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: styles.detailsError,\n          children: \"El anime que busca no est\\xE1 disponible en este momento\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: styles.detailsMain\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: styles.detailsMain,\n      children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n        className: styles.detailsAside,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.detailImage,\n          style: {\n            backgroundImage: `url(${animeInfo.images.jpg.large_image_url})`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.genresContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: styles.genresTitle,\n            children: \"STATUS \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"spam\", {\n            className: styles.detailsGenre,\n            children: animeInfo.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.genresContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: styles.genresTitle,\n            children: \"GENEROS \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), animeInfo.genres.map(item => {\n            return /*#__PURE__*/_jsxDEV(\"spam\", {\n              className: styles.detailsGenre,\n              children: item.name\n            }, \"EG-\" + item.mal_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 65\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.genresContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: styles.genresTitle,\n            children: \"EPISODIOS \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"spam\", {\n            className: styles.detailsGenre,\n            children: animeInfo.episodes\n          }, \"EG-\" + animeInfo.mal_id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: styles.detailsInfo,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: styles.detailsTitle,\n          children: animeInfo.title_synonyms[0] ? animeInfo.title_synonyms[0] : animeInfo.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"spam\", {\n          className: styles.animeStatus,\n          children: animeInfo.status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.detailsDescription,\n          children: animeInfo.synopsis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.videosContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: styles.videosTitle,\n            children: \"Videos relacionados\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), animeVideos.promo.length > 0 ? animeVideos.promo.map(item => {\n            console.log(item);\n            return /*#__PURE__*/_jsxDEV(\"iframe\", {\n              className: styles.video,\n              width: \"512\",\n              height: \"256\",\n              src: item.trailer.embed_url,\n              title: \"YouTube video player\",\n              frameborder: \"0\",\n              allow: \"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen;\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: styles.genresTitle,\n            children: \"No se encontraron videos disponibles\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AnimeDetails, \"b262vwXAqLDRMFsmfw2lrDPC69k=\", false, function () {\n  return [useParams];\n});\n\n_c = AnimeDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnimeDetails\");","map":{"version":3,"sources":["D:/Descargas_/animepedia/src/pages/AnimeDetails.jsx"],"names":["useEffect","useState","useParams","Header","getRequesById","styles","AnimeDetails","params","animeId","animeInfo","setAnimeInfo","loading","setLoading","anime404","setAnime404","animeVideos","setAnimeVideos","then","read","status","data","detailsError","detailsMain","detailsAside","detailImage","backgroundImage","images","jpg","large_image_url","genresContainer","genresTitle","detailsGenre","genres","map","item","name","mal_id","episodes","detailsInfo","detailsTitle","title_synonyms","title","animeStatus","detailsDescription","synopsis","videosContainer","videosTitle","promo","length","console","log","video","trailer","embed_url"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {Header} from \"../components/Header\";\r\nimport { getRequesById } from \"../utils/apiRequest\";\r\n\r\nimport styles from \"./AnimeDetails.module.css\";\r\n\r\n\r\nexport function AnimeDetails(params) {\r\n\r\n\r\n    let {animeId} = useParams();\r\n    const[animeInfo,setAnimeInfo]=useState([]);\r\n    const[loading,setLoading]= useState(true);\r\n    const[anime404,setAnime404]= useState(false);\r\n    const[animeVideos, setAnimeVideos]= useState([]);\r\n\r\n    useEffect(() => {\r\n        getRequesById(\"anime\",animeId)\r\n            .then(read => {\r\n                if (read.status === 404) {\r\n                    setAnime404(true);\r\n                }\r\n                setAnimeInfo(read.data)\r\n            })\r\n        getRequesById(\"anime\",animeId+\"/videos\")\r\n            .then(read => {\r\n                if (read.status === 404) {\r\n                    setAnime404(true);\r\n                }\r\n                setAnimeVideos(read.data)\r\n                setLoading(false)\r\n            })\r\n        \r\n    },[animeId]);\r\n    // console.log(animeInfo.data.title_synonyms[0]);\r\n    if (anime404) {\r\n        return(\r\n            <div>\r\n                <Header/>\r\n                <main >\r\n                    <h1 className={styles.detailsError}>El anime que busca no está disponible en este momento</h1>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n    if (loading) {\r\n        return(\r\n            <div>\r\n                <Header/>\r\n                <main className={styles.detailsMain}>\r\n                    \r\n                </main>\r\n    \r\n            </div>\r\n        );\r\n    }\r\n    return(\r\n        <div>\r\n            <Header/>\r\n            <main className={styles.detailsMain}>\r\n                <aside className={styles.detailsAside}>\r\n                    <div className={styles.detailImage} style={{backgroundImage: `url(${animeInfo.images.jpg.large_image_url})`}}></div>\r\n                    \r\n                    <div className={styles.genresContainer}>\r\n                        <h4 className={styles.genresTitle}>STATUS </h4>\r\n                        <spam className={styles.detailsGenre}>{animeInfo.status}</spam>\r\n                    </div>\r\n                    <div className={styles.genresContainer}>\r\n                        <h4 className={styles.genresTitle}>GENEROS </h4>\r\n                        {animeInfo.genres.map((item) => {return(<spam key={\"EG-\"+item.mal_id} className={styles.detailsGenre}>{item.name}</spam>)})}\r\n                    </div>\r\n                    <div className={styles.genresContainer}>\r\n                        <h4 className={styles.genresTitle}>EPISODIOS </h4>\r\n                        <spam key={\"EG-\"+animeInfo.mal_id} className={styles.detailsGenre}>{animeInfo.episodes}</spam>\r\n                        \r\n                    </div>\r\n                </aside>\r\n                <section className={styles.detailsInfo}>\r\n                    <h1 className={styles.detailsTitle}>{animeInfo.title_synonyms[0] ? animeInfo.title_synonyms[0] : animeInfo.title}</h1>\r\n                    <spam className={styles.animeStatus}>{animeInfo.status}</spam>\r\n                    <p className={styles.detailsDescription}>{animeInfo.synopsis}</p>\r\n                    <div className={styles.videosContainer}>\r\n                        <h3 className={styles.videosTitle}>Videos relacionados</h3>\r\n                        {animeVideos.promo.length > 0 ?\r\n                            animeVideos.promo.map((item)=>{\r\n                                console.log(item)\r\n                                return(\r\n\r\n                                    <iframe \r\n                                        className={styles.video} \r\n                                        width=\"512\" height=\"256\" src={item.trailer.embed_url} title=\"YouTube video player\" \r\n                                        frameborder=\"0\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen;\" \r\n                                        >\r\n\r\n                                    </iframe>)\r\n\r\n                            }) : <h4 className={styles.genresTitle}>No se encontraron videos disponibles</h4>\r\n                        }\r\n                        \r\n                    </div>\r\n                </section>\r\n\r\n            </main>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\Descargas_\\\\final_v002\\\\final\\\\src\\\\pages\\\\MangasHome.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { MangaGrid } from '../components/MangaGrid';\nimport { GenresNav } from '../components/GenresNav';\nimport { Header } from '../components/Header';\nimport { Pagination } from '../components/Pagination';\nimport { getRequestList } from \"../utils/apiRequest.js\";\nimport styles from \"./MangasHome.module.css\";\nimport genresList from \"../components/genres_anime.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MangasHome(params) {\n  _s();\n\n  const [mangas, setMangas] = useState([]);\n  const [page, setPage] = useState(1);\n  const [hasNextPage, setHasNextPage] = useState(true);\n  const [maxPages, setMaxPages] = useState(\"\");\n  const [searchParam, setSearchParam] = useState(\"\");\n  const [genre, setGenre] = useState(\"\");\n  const [searching, setSearching] = useState(false);\n  const [genreState, setGenreState] = useState(false);\n  const [nF404, setNF404] = useState(false);\n  useEffect(() => {\n    setNF404(false);\n\n    if (searching || genreState) {\n      if (searching) {\n        setGenre(\"\");\n      } else {\n        setSearchParam(\"\");\n        setNF404(false);\n      }\n\n      setPage(1);\n      getRequestList(\"manga\", searchParam, page, genre).then(json => {\n        if (json.pagination.items.count < 1) {\n          setNF404(true);\n        }\n\n        setMangas(json.data);\n        setHasNextPage(json.pagination.has_next_page);\n        setMaxPages(json.pagination.last_visible_page);\n      });\n      setSearching(false);\n      setGenreState(false);\n    } else {\n      getRequestList(\"manga\", searchParam, page, genre).then(json => {\n        setMangas(json.data);\n        setHasNextPage(json.pagination.has_next_page);\n        setMaxPages(json.pagination.last_visible_page);\n        setPage(page);\n      });\n    }\n  }, [page, searchParam, genre]);\n\n  if (nF404) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        searchParam: searchParam,\n        setSearchParam: setSearchParam,\n        setSearching: setSearching\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: styles.detailsError,\n          children: \"El manga que busca no est\\xE1 disponible en este momento\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      searchParam: searchParam,\n      setSearchParam: setSearchParam,\n      setSearching: setSearching\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: styles.mangasMain,\n      children: [/*#__PURE__*/_jsxDEV(MangaGrid, {\n        className: styles.mangaGrid,\n        page: page,\n        hasNextPage: hasNextPage,\n        maxPages: maxPages,\n        setPage: setPage,\n        mangas: mangas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GenresNav, {\n        className: styles.genresNav,\n        genres: genresList,\n        setGenre: setGenre,\n        setGenreState: setGenreState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: styles.paginationSection,\n      children: /*#__PURE__*/_jsxDEV(Pagination, {\n        page: page,\n        hasNextPage: hasNextPage,\n        maxPages: maxPages,\n        setPage: setPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MangasHome, \"2AjncYTPLcXd7mIxtU41UBchAP0=\");\n\n_c = MangasHome;\n\nvar _c;\n\n$RefreshReg$(_c, \"MangasHome\");","map":{"version":3,"sources":["D:/Descargas_/final_v002/final/src/pages/MangasHome.jsx"],"names":["useEffect","useState","MangaGrid","GenresNav","Header","Pagination","getRequestList","styles","genresList","MangasHome","params","mangas","setMangas","page","setPage","hasNextPage","setHasNextPage","maxPages","setMaxPages","searchParam","setSearchParam","genre","setGenre","searching","setSearching","genreState","setGenreState","nF404","setNF404","then","json","pagination","items","count","data","has_next_page","last_visible_page","detailsError","mangasMain","mangaGrid","genresNav","paginationSection"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAAQC,SAAR,QAAwB,yBAAxB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,cAAT,QAA8B,wBAA9B;AACA,OAAOC,MAAP,MAAoB,yBAApB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;;AAGA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AAAA;;AAE/B,QAAK,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAK,CAACY,IAAD,EAAQC,OAAR,IAAmBb,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAK,CAACc,WAAD,EAAeC,cAAf,IAAiCf,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAK,CAACgB,QAAD,EAAYC,WAAZ,IAA2BjB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAK,CAACkB,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAK,CAACoB,KAAD,EAAQC,QAAR,IAAmBrB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAK,CAACsB,SAAD,EAAYC,YAAZ,IAA2BvB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAK,CAACwB,UAAD,EAAaC,aAAb,IAA6BzB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAK,CAAC0B,KAAD,EAAOC,QAAP,IAAiB3B,QAAQ,CAAC,KAAD,CAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ4B,IAAAA,QAAQ,CAAC,KAAD,CAAR;;AACA,QAAIL,SAAS,IAAIE,UAAjB,EAA6B;AACzB,UAAIF,SAAJ,EAAe;AACXD,QAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,OAFD,MAIA;AACIF,QAAAA,cAAc,CAAC,EAAD,CAAd;AACAQ,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACH;;AACDd,MAAAA,OAAO,CAAC,CAAD,CAAP;AACAR,MAAAA,cAAc,CAAC,OAAD,EAASa,WAAT,EAAqBN,IAArB,EAA0BQ,KAA1B,CAAd,CAA+CQ,IAA/C,CAAoDC,IAAI,IAAI;AACxD,YAAIA,IAAI,CAACC,UAAL,CAAgBC,KAAhB,CAAsBC,KAAtB,GAA8B,CAAlC,EAAqC;AACjCL,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDhB,QAAAA,SAAS,CAACkB,IAAI,CAACI,IAAN,CAAT;AACAlB,QAAAA,cAAc,CAACc,IAAI,CAACC,UAAL,CAAgBI,aAAjB,CAAd;AACAjB,QAAAA,WAAW,CAACY,IAAI,CAACC,UAAL,CAAgBK,iBAAjB,CAAX;AACH,OAPD;AAQAZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KApBD,MAqBK;AACDpB,MAAAA,cAAc,CAAC,OAAD,EAASa,WAAT,EAAqBN,IAArB,EAA0BQ,KAA1B,CAAd,CAA+CQ,IAA/C,CAAoDC,IAAI,IAAI;AACxDlB,QAAAA,SAAS,CAACkB,IAAI,CAACI,IAAN,CAAT;AACAlB,QAAAA,cAAc,CAACc,IAAI,CAACC,UAAL,CAAgBI,aAAjB,CAAd;AACAjB,QAAAA,WAAW,CAACY,IAAI,CAACC,UAAL,CAAgBK,iBAAjB,CAAX;AACAtB,QAAAA,OAAO,CAACD,IAAD,CAAP;AACH,OALD;AAMH;AAEJ,GAhCQ,EAgCN,CAACA,IAAD,EAAMM,WAAN,EAAkBE,KAAlB,CAhCM,CAAT;;AAiCA,MAAIM,KAAJ,EAAW;AACP,wBACI;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,WAAW,EAAER,WAArB;AAAkC,QAAA,cAAc,EAAEC,cAAlD;AAAkE,QAAA,YAAY,EAAEI;AAAhF;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,+BACI;AAAI,UAAA,SAAS,EAAEjB,MAAM,CAAC8B,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AACD,sBACI;AAAA,4BACI,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAElB,WAArB;AAAkC,MAAA,cAAc,EAAEC,cAAlD;AAAkE,MAAA,YAAY,EAAEI;AAAhF;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAM,MAAA,SAAS,EAAEjB,MAAM,CAAC+B,UAAxB;AAAA,8BACI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAE/B,MAAM,CAACgC,SAA7B;AAAwC,QAAA,IAAI,EAAE1B,IAA9C;AAAoD,QAAA,WAAW,EAAEE,WAAjE;AAA8E,QAAA,QAAQ,EAAEE,QAAxF;AAAkG,QAAA,OAAO,EAAEH,OAA3G;AAAoH,QAAA,MAAM,EAAEH;AAA5H;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAEJ,MAAM,CAACiC,SAA7B;AAAwC,QAAA,MAAM,EAAEhC,UAAhD;AAA4D,QAAA,QAAQ,EAAEc,QAAtE;AAAgF,QAAA,aAAa,EAAEI;AAA/F;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAMI;AAAS,MAAA,SAAS,EAAEnB,MAAM,CAACkC,iBAA3B;AAAA,6BAEI,QAAC,UAAD;AAAY,QAAA,IAAI,EAAE5B,IAAlB;AAAwB,QAAA,WAAW,EAAEE,WAArC;AAAkD,QAAA,QAAQ,EAAEE,QAA5D;AAAsE,QAAA,OAAO,EAAEH;AAA/E;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GApEeL,U;;KAAAA,U","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport {MangaGrid} from '../components/MangaGrid';\r\nimport { GenresNav } from '../components/GenresNav';\r\nimport { Header } from '../components/Header';\r\nimport { Pagination } from '../components/Pagination';\r\nimport { getRequestList} from \"../utils/apiRequest.js\";\r\nimport styles  from \"./MangasHome.module.css\";\r\nimport genresList from \"../components/genres_anime.json\"\r\n\r\n\r\nexport function MangasHome(params) {\r\n\r\n    const[mangas, setMangas] = useState([]);\r\n    const[page , setPage] = useState(1);\r\n    const[hasNextPage , setHasNextPage] = useState(true);\r\n    const[maxPages , setMaxPages] = useState(\"\");\r\n    const[searchParam, setSearchParam] = useState(\"\");\r\n    const[genre, setGenre]= useState(\"\");\r\n    const[searching, setSearching]= useState(false);\r\n    const[genreState, setGenreState]= useState(false);\r\n    const[nF404,setNF404]=useState(false);\r\n\r\n    useEffect(() => {\r\n        setNF404(false);\r\n        if (searching || genreState) {\r\n            if (searching) {\r\n                setGenre(\"\");\r\n            }\r\n            else\r\n            {\r\n                setSearchParam(\"\");\r\n                setNF404(false);\r\n            }\r\n            setPage(1)\r\n            getRequestList(\"manga\",searchParam,page,genre).then(json => {\r\n                if (json.pagination.items.count < 1) {\r\n                    setNF404(true);\r\n                }\r\n                setMangas(json.data)\r\n                setHasNextPage(json.pagination.has_next_page)\r\n                setMaxPages(json.pagination.last_visible_page)\r\n            });\r\n            setSearching(false);\r\n            setGenreState(false);\r\n        }\r\n        else {\r\n            getRequestList(\"manga\",searchParam,page,genre).then(json => { \r\n                setMangas(json.data)\r\n                setHasNextPage(json.pagination.has_next_page)\r\n                setMaxPages(json.pagination.last_visible_page)\r\n                setPage(page)\r\n            });\r\n        }\r\n        \r\n    }, [page,searchParam,genre]);\r\n    if (nF404) {\r\n        return (\r\n            <div>\r\n                <Header searchParam={searchParam} setSearchParam={setSearchParam} setSearching={setSearching}/>\r\n                <main >\r\n                    <h1 className={styles.detailsError}>El manga que busca no está disponible en este momento</h1>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            <Header searchParam={searchParam} setSearchParam={setSearchParam} setSearching={setSearching}/>\r\n            <main className={styles.mangasMain}>\r\n                <MangaGrid className={styles.mangaGrid} page={page} hasNextPage={hasNextPage} maxPages={maxPages} setPage={setPage} mangas={mangas}/>\r\n                <GenresNav className={styles.genresNav} genres={genresList} setGenre={setGenre} setGenreState={setGenreState}/>\r\n            </main>\r\n            <section className={styles.paginationSection}>\r\n\r\n                <Pagination page={page} hasNextPage={hasNextPage} maxPages={maxPages} setPage={setPage}/>\r\n            </section>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}